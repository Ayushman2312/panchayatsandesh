"""
Django settings for news_web project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a0gf2ssfudd)+0c9!nsqy-5o7s_d=ac*w23@*9w#7_agalwr18'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'csp.middleware.CSPMiddleware',
]

ROOT_URLCONF = 'news_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news_web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'panchayatsandesh',
        'USER':'postgres',
        'PASSWORD':'Ayushman@2312',
        'HOST':'localhost',
        'PORT':'5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 31536000  # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply to subdomains too
# SECURE_HSTS_PRELOAD = True  # Allow your site to be added to browser preload lists
# SECURE_CONTENT_TYPE_NOSNIFF = True
# X_FRAME_OPTIONS = 'DENY'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')




# Tailwind CSS setup for Django production without a dedicated Tailwind app

# Since you're using Tailwind CSS directly without a dedicated Django app,
# we'll focus on optimizing the CDN usage and ensuring proper Content Security Policy.

# 1. Update your base template to include Tailwind CSS from CDN
# In your base HTML template (e.g., base.html or home.html), include:
# <script src="https://cdn.tailwindcss.com"></script>

# 2. For production, it's recommended to use a specific version of Tailwind CSS:
# <script src="https://cdn.tailwindcss.com?v=3.x.x"></script>
# Replace 3.x.x with the latest stable version

# 3. Ensure your Content Security Policy allows loading from cdn.tailwindcss.com
# CSP_DEFAULT_SRC = ("'self'",)
# CSP_SCRIPT_SRC = ("'self'", "https://cdn.tailwindcss.com")
# CSP_STYLE_SRC = ("'self'", "https://cdn.tailwindcss.com")

# 4. If you're using django-csp for Content Security Policy:

# 5. To optimize performance, consider using Tailwind CLI to build a custom CSS file
# and serve it from your Django static files. This requires additional setup:
# - Install Tailwind CSS as a dev dependency (npm install -D tailwindcss)
# - Create a tailwind.config.js file
# - Build your CSS file (npx tailwindcss -i input.css -o output.css)
# - Include the built CSS file in your Django templates

# 6. Remember to run collectstatic for production:
# python manage.py collectstatic

# Note: The above setup assumes you're comfortable with the trade-offs of using
# Tailwind via CDN in production. For larger projects, consider adopting a more
# robust build process with a dedicated Tailwind setup.

# Configure the WSGI application


# If everything is correct, the WSGI application should now load properly